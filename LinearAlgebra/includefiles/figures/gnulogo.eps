%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Wikipedia GNU General Public License.pdf)
%%Version: 1 4
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 07:36:20 05/03/07
%%For: (gnome)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%ADO_ContainsXMP: MainFirst
%%BoundingBox: 0 0 200 200
%%HiResBoundingBox: 0.0 0.0 200.0 200.0
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
1 pop
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 3696 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-702">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/">
         <xap:CreateDate>2007-05-03T07:36:20-04:00</xap:CreateDate>
         <xap:ModifyDate>2007-05-03T07:36:20-04:00</xap:ModifyDate>
         <xap:MetadataDate>2007-05-03T07:36:20-04:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:9EA87BBF69F9DB11A3B1A51A22911409</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:9EA87BBF69F9DB11A3B1A51A22911409</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:5a22d6ed-d75d-4384-89cb-003151db492f</stRef:instanceID>
            <stRef:documentID>uuid:d2a74a4a-c5b8-4841-a5fc-37e760a05a90</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Wikipedia GNU General Public License.pdf</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>gnome</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
0.0 0.0 200.0 200.0 rectclip
/N10 [/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/ColorSpace defineRes pop

q
0.0 0.0 m
200.0 0.0 l
200.0 200.0 l
0.0 200.0 l
h
W
n
q
n
7.3813 191.765 m
7.3813 191.765 186.319 -182.216 re
W
n
n
42.737 82.983 m
41.833 81.364 39.718 81.106 38.732 81.432 c
37.089 81.976 34.984 82.353 32.947 80.901 c
30.912 79.452 28.711 80.547 29.095 83.195 c
29.482 85.839 30.438 88.193 32.974 89.653 c
38.514 92.84 34.663 95.057 37.705 98.254 c
40.751 101.459 40.078 102.44 39.975 106.791 c
29.682 108.335 23.847 111.305 17.333 119.445 c
10.816 127.586 8.291 134.285 7.6157 144.492 c
6.9409 154.696 7.5249 161.312 11.934 169.785 c
16.343 178.253 20.988 182.332 29.031 186.561 c
37.078 190.792 44.96 191.805 52.246 191.682 c
59.532 191.558 64.389 191.025 68.505 188.676 c
72.622 186.326 76.388 183.37 78.79 183.348 c
81.19 183.327 82.825 183.957 83.991 184.851 c
84.303 176.939 77.183 176.253 70.813 176.085 c
64.444 175.919 60.528 178.553 54.663 177.574 c
48.794 176.592 39.189 173.924 34.509 165.778 c
29.831 157.632 29.669 154.754 30.058 147.923 c
30.446 141.092 36.329 135.996 39.646 135.939 c
42.965 135.885 43.706 136.844 46.61 138.741 c
49.515 140.635 64.345 158.993 69.405 163.117 c
74.467 167.241 79.459 168.513 84.854 168.581 c
90.244 168.646 91.623 168.464 95.971 166.681 c
100.32 164.899 102.993 161.616 106.498 159.61 c
108.288 160.666 109.401 162.242 111.049 163.441 c
116.93 167.741 119.983 168.898 126.975 168.219 c
130.99 167.828 136.057 165.533 139.079 162.904 c
144.461 158.226 148.906 151.711 152.503 146.762 c
155.298 142.906 158.593 138.295 163.292 136.855 c
168.423 135.28 172.286 141.927 172.851 145.613 c
173.172 147.703 173.592 149.535 173.597 151.833 c
173.599 154.132 173.363 156.923 172.701 159.319 c
172.039 161.717 170.905 164.1 169.676 166.078 c
167.673 169.294 164.399 172.662 160.994 174.395 c
159.08 175.368 154.585 177.135 151.748 177.198 c
148.275 177.271 145.63 176.106 142.417 175.887 c
138.529 175.621 131.584 174.746 128.537 177.752 c
126.596 179.663 126.356 180.937 126.023 183.43 c
126.881 182.724 128.079 182.258 129.144 182.169 c
131.577 181.964 133.856 183.951 135.821 185.103 c
137.443 186.05 139.733 187.748 141.861 188.604 c
147.32 190.807 154.033 190.743 159.8 190.151 c
164.42 189.681 170.413 187.623 174.466 185.33 c
178.539 183.027 182.466 179.141 185.34 175.479 c
188.956 170.871 190.935 166.919 192.243 161.169 c
193.917 153.831 194.382 142.806 192.357 135.568 c
190.763 129.867 185.465 121.107 180.954 116.813 c
176.508 112.577 171.372 110.531 165.534 109.414 c
165.762 108.235 165.8 107.137 166.103 106.17 c
166.532 104.798 167.353 103.27 169.039 103.754 c
169.711 103.947 170.073 104.113 170.959 103.337 c
171.843 102.563 171.384 99.565 168.89 98.221 c
167.625 97.539 166.289 97.391 164.266 97.349 c
162.239 97.31 159.078 97.302 156.88 97.686 c
154.683 98.071 153.369 99.816 150.932 100.089 c
147.17 100.51 144.288 103.229 141.27 105.173 c
140.014 105.984 139.586 105.992 138.86 106.402 c
139.254 105.203 139.778 103.956 140.038 102.802 c
140.299 101.648 140.188 100.58 140.326 99.658 c
140.463 98.735 140.72 98.017 140.869 97.27 c
141.47 96.729 141.664 95.907 142.679 95.651 c
143.69 95.393 145.277 95.796 146.314 95.934 c
147.351 96.073 148.045 96.639 148.86 96.484 c
149.672 96.33 150.442 95.746 151.125 95.2 c
151.807 94.653 152.394 94.574 152.946 93.211 c
153.499 91.851 154.007 89.062 154.081 87.194 c
154.157 85.329 153.946 83.646 153.395 82.167 c
152.842 80.687 152.354 80.031 150.857 78.564 c
149.364 77.099 146.925 74.947 144.494 73.448 c
144.941 72.787 145.141 72.178 145.837 71.46 c
146.535 70.738 147.991 69.933 148.64 69.174 c
149.286 68.414 149.616 67.87 149.626 67.018 c
149.635 66.167 149.593 65.06 148.901 64.134 c
147.18 61.82 145.146 61.406 142.669 60.32 c
143.085 57.72 143.424 55.86 142.821 53.265 c
142.576 52.208 142.031 49.809 140.728 49.192 c
139.418 48.577 136.902 48.874 135.31 48.621 c
133.717 48.369 132.826 48.131 131.584 47.883 c
130.83 46.791 129.703 45.588 129.32 44.61 c
128.932 43.631 129.05 43.279 129.374 42.28 c
129.698 41.281 130.801 39.829 131.112 38.66 c
131.424 37.489 131.486 36.232 131.193 35.059 c
130.902 33.887 130.405 33.033 129.404 31.995 c
128.405 30.952 126.439 30.134 125.459 29.291 c
124.479 28.446 123.504 28.345 123.771 26.946 c
124.139 25.031 126.942 21.917 128.971 21.178 c
130.186 20.733 131.817 20.872 133.293 21.496 c
133.194 19.856 131.776 18.753 130.849 17.664 c
133.357 18.381 135.791 19.755 137.475 21.577 c
136.95 19.992 135.156 17.455 132.469 15.225 c
129.783 12.998 129.801 13.454 128.464 12.567 c
130.9 12.077 133.166 12.211 135.054 12.547 c
134.02 11.979 132.321 11.176 130.078 10.939 c
127.832 10.706 126.447 10.871 124.419 11.362 c
122.396 11.854 120.547 13.694 118.094 14.965 c
118.332 14.053 118.503 12.96 119.536 12.023 c
120.567 11.088 122.129 10.612 123.788 9.803 c
121.676 10.041 119.454 10.115 117.38 10.572 c
115.843 10.91 114.813 11.27 113.687 11.829 c
112.562 12.385 111.694 13.196 110.699 13.882 c
111.175 12.97 111.318 11.896 112.13 11.146 c
112.941 10.396 114.262 10.115 115.327 9.601 c
114.214 9.624 113.145 9.383 111.988 9.674 c
110.836 9.964 109.753 10.419 108.551 11.307 c
107.352 12.188 106.113 13.275 105.089 14.391 c
104.063 15.504 102.8 16.948 102.418 17.974 c
102.034 19.001 102.648 19.717 102.763 20.591 c
102.057 20.125 101.186 19.868 100.644 19.195 c
100.1 18.521 99.617 17.905 99.859 16.73 c
100.1 15.557 101.184 14.118 101.952 12.812 c
99.662 14.682 98.385 15.403 97.84 17.661 c
97.331 19.774 98.648 21.69 99.651 23.291 c
100.15 24.085 100.895 24.823 101.358 25.59 c
100.326 26.601 99.145 27.473 98.258 28.625 c
97.374 29.778 97.0 31.339 96.096 32.441 c
95.191 33.546 93.975 34.246 92.915 35.146 c
93.845 33.146 95.378 30.691 95.711 29.143 c
96.043 27.594 95.336 26.645 94.788 25.81 c
94.239 24.973 93.351 24.788 92.507 24.275 c
91.668 23.759 90.359 24.165 89.857 23.401 c
89.355 22.64 89.221 21.49 89.701 20.735 c
91.665 17.635 l
90.943 18.001 89.694 19.064 89.131 19.817 c
88.57 20.573 87.705 21.267 87.589 22.289 c
87.471 23.306 87.413 24.191 88.073 25.099 c
88.736 26.008 90.543 26.311 91.351 27.01 c
92.161 27.706 92.613 28.163 92.57 29.064 c
92.523 29.967 91.641 30.611 90.884 31.181 c
88.572 32.915 85.604 34.513 83.643 36.604 c
82.532 37.784 81.997 38.739 81.777 39.553 c
81.552 40.368 81.79 41.005 82.341 42.005 c
82.89 43.009 84.78 44.348 85.012 45.435 c
85.242 46.524 84.286 46.761 83.425 47.141 c
82.563 47.525 80.925 46.946 80.127 47.615 c
79.328 48.281 80.361 49.687 79.459 50.455 c
78.562 51.226 76.499 50.795 75.434 51.624 c
74.371 52.452 73.932 53.479 73.565 54.68 c
73.199 55.883 73.157 57.199 73.406 58.069 c
73.656 58.939 74.401 59.091 74.85 59.543 c
75.301 59.991 75.692 60.367 75.091 61.041 c
74.491 61.712 72.526 61.002 71.396 61.866 c
70.264 62.729 70.956 64.796 70.157 65.669 c
69.358 66.536 67.923 66.196 67.169 66.476 c
66.41 66.754 66.113 65.771 65.65 67.325 c
65.186 68.879 65.172 73.512 64.547 75.24 c
63.924 76.968 62.697 75.358 62.129 77.074 c
61.558 78.793 62.099 81.537 61.843 84.13 c
60.68 91.189 l
56.625 88.468 43.844 84.965 42.737 82.983 c
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/E4 exch /ColorSpace defineRes

cs 1.0 1.0 1.0 sc
f
n
104.688 152.165 m
104.525 150.396 104.825 147.635 105.192 145.905 c
105.632 143.834 106.052 142.762 107.732 141.514 c
110.809 139.229 112.775 139.614 115.142 138.289 c
116.267 137.659 117.693 136.603 118.11 135.487 c
118.526 134.368 117.837 133.156 116.981 132.679 c
118.476 132.457 120.151 134.142 119.452 135.87 c
119.105 136.723 117.468 137.102 116.967 137.96 c
116.464 138.816 116.464 139.701 116.702 140.573 c
117.13 142.145 120.238 143.573 121.335 144.815 c
123.027 146.726 123.677 148.326 122.719 150.788 c
121.372 154.246 116.18 157.021 113.069 158.378 c
111.645 159.001 110.848 159.044 109.737 159.377 c
112.01 158.043 114.409 156.984 115.56 154.004 c
116.519 151.517 115.688 150.579 115.721 148.413 c
115.732 147.411 117.057 146.906 117.643 146.272 c
118.153 145.721 118.112 145.31 117.704 144.551 c
117.661 145.236 117.365 145.749 116.838 146.123 c
115.971 146.739 115.032 146.607 114.568 147.872 c
113.863 149.796 115.259 151.617 113.689 153.778 c
112.515 155.393 110.954 157.201 108.849 157.249 c
107.85 157.271 107.101 157.122 106.036 156.807 c
104.617 158.514 l
104.586 158.536 l
101.697 161.171 99.722 163.345 95.67 165.156 c
91.62 166.967 89.622 167.24 84.979 167.138 c
80.335 167.034 75.722 166.646 70.345 162.009 c
64.966 157.368 51.102 139.605 47.738 137.356 c
44.377 135.106 43.632 134.346 39.432 134.344 c
35.231 134.344 28.672 140.286 28.416 147.712 c
28.16 155.139 28.055 157.779 33.219 166.725 c
38.382 175.673 47.735 178.419 54.673 179.348 c
61.613 180.276 65.781 177.83 70.916 177.818 c
76.049 177.806 81.122 178.694 82.618 182.775 c
81.887 182.34 80.905 181.849 78.145 181.993 c
75.389 182.138 71.563 185.331 67.26 187.472 c
62.958 189.611 58.17 189.863 52.03 189.978 c
45.888 190.095 38.227 189.623 30.634 185.527 c
23.043 181.429 17.86 177.081 13.458 169.058 c
9.0552 161.038 8.3975 154.488 9.1069 144.776 c
9.8169 135.063 12.81 127.843 18.579 120.732 c
24.346 113.624 30.11 110.147 40.504 108.855 c
42.69 118.505 l
38.784 112.899 l
38.883 119.135 l
35.349 114.749 l
33.8 120.695 l
30.937 115.928 l
29.514 122.567 l
25.368 119.212 l
26.682 124.69 l
21.193 124.081 l
23.713 127.89 l
18.709 127.83 l
21.622 132.912 l
17.182 133.617 l
20.722 138.24 l
15.285 139.85 l
19.785 144.161 l
15.342 147.783 l
18.818 150.486 l
15.568 154.812 l
19.034 158.848 l
17.742 164.178 l
20.686 166.743 l
21.562 172.835 l
24.865 174.493 l
27.709 179.25 l
32.962 179.809 l
35.555 184.085 l
40.833 183.816 l
45.819 186.525 l
50.994 185.323 l
56.868 187.096 l
61.219 186.076 l
66.897 185.243 l
72.379 180.858 l
63.969 183.795 l
59.739 181.764 l
56.242 183.901 l
53.835 182.264 l
49.576 181.839 l
45.754 182.084 l
42.969 178.686 l
37.294 178.627 l
35.268 174.046 l
30.22 172.275 l
29.748 167.013 l
26.128 164.178 l
27.335 159.222 l
24.209 154.078 l
26.608 149.578 l
24.245 145.458 l
27.388 143.409 l
26.674 136.79 l
31.041 135.688 l
32.024 130.777 l
36.784 131.273 l
39.74 127.908 l
43.394 131.475 l
50.055 134.797 52.799 136.655 57.989 142.269 c
63.899 148.661 67.286 154.57 75.159 158.947 c
80.802 162.086 85.407 163.215 91.751 162.118 c
97.705 161.092 99.698 157.52 104.083 153.755 c
104.548 154.598 104.643 154.821 105.409 155.441 c
105.17 154.349 104.787 153.215 104.688 152.165 c
h
135.731 112.676 m
135.344 112.342 135.053 112.001 134.432 111.723 c
133.81 111.447 132.964 111.374 132.143 111.17 c
133.296 109.373 134.507 107.56 135.612 105.672 c
136.721 103.782 137.677 101.717 138.731 99.739 c
138.681 100.872 138.749 102.081 138.584 103.138 c
138.419 104.198 137.94 105.124 137.464 106.714 c
136.99 108.302 136.405 110.465 135.731 112.676 c
h
135.329 122.998 m
135.753 122.833 135.914 122.794 136.449 122.387 c
136.988 121.981 137.729 121.572 138.149 120.598 c
138.574 119.623 138.557 118.114 138.467 117.5 c
138.095 117.607 137.586 117.534 137.198 117.867 c
136.813 118.196 136.583 118.945 136.089 119.264 c
135.595 119.586 135.179 119.517 134.63 119.586 c
134.914 118.785 135.049 117.985 134.918 117.26 c
134.636 115.677 133.705 114.872 132.199 114.684 c
131.537 114.601 130.492 114.817 129.921 114.923 c
130.185 114.33 130.637 113.809 130.901 113.217 c
132.176 113.4 133.121 113.375 133.807 113.696 c
134.492 114.015 135.227 114.733 136.105 115.039 c
136.988 115.342 137.771 115.337 138.731 115.487 c
137.976 114.832 137.477 114.18 136.721 113.527 c
137.276 111.913 137.831 110.298 138.385 108.685 c
139.565 107.946 140.671 107.56 142.151 106.65 c
143.637 105.741 145.416 104.112 147.349 103.225 c
149.283 102.339 150.432 101.854 152.452 101.475 c
154.474 101.093 156.08 99.458 158.065 99.19 c
160.052 98.925 163.766 98.871 165.296 99.024 c
167.033 99.19 169.293 100.09 169.496 101.996 c
168.039 101.635 165.812 101.959 164.688 104.701 c
164.188 105.919 164.434 108.16 163.667 109.602 c
162.907 111.04 161.843 111.503 160.569 113.278 c
159.299 115.056 157.217 117.854 156.049 120.232 c
154.883 122.61 154.607 125.304 153.619 127.435 c
152.633 129.567 151.143 131.286 149.987 132.929 c
147.468 136.518 145.435 138.971 141.281 140.781 c
139.284 141.652 137.009 141.885 134.875 142.437 c
134.004 142.045 132.813 141.615 132.601 140.6 c
132.392 139.583 132.797 138.083 133.535 137.319 c
134.769 136.043 136.598 134.664 137.316 132.637 c
137.78 131.336 137.914 126.974 137.513 125.79 c
137.098 124.562 136.131 123.817 135.329 122.998 c
h
125.672 121.846 m
127.59 122.664 129.265 123.327 131.352 123.456 c
132.189 123.509 133.487 123.378 134.335 123.342 c
135.053 124.401 135.972 125.238 136.308 126.446 c
136.528 127.251 136.419 130.973 136.024 131.941 c
134.877 134.755 133.762 134.874 132.183 136.485 c
131.034 137.655 130.989 139.437 130.645 141.432 c
130.52 142.162 130.162 143.09 129.992 143.847 c
127.928 144.194 125.704 144.31 123.33 144.191 c
124.479 145.294 125.596 146.305 125.925 147.965 c
126.256 149.625 125.986 151.665 125.044 153.152 c
124.101 154.639 122.593 155.938 121.209 157.149 c
119.827 158.361 117.843 159.361 116.535 160.354 c
118.238 160.963 119.979 161.861 121.648 162.186 c
126.0 163.028 129.749 161.738 133.943 159.2 c
136.384 157.725 138.403 156.323 140.951 153.654 c
143.506 150.984 146.666 146.085 149.136 143.181 c
151.604 140.276 153.598 137.98 155.75 136.248 c
157.906 134.516 159.855 134.021 161.905 132.909 c
165.104 129.514 l
167.693 132.716 l
171.855 132.245 l
172.714 136.92 l
176.535 137.966 l
175.914 144.265 l
178.662 146.215 l
176.597 150.135 l
178.693 154.418 l
175.959 159.316 l
177.015 164.03 l
173.848 166.728 l
173.434 171.737 l
169.017 173.422 l
167.244 177.782 l
162.277 177.837 l
159.842 181.071 l
156.496 180.84 l
152.768 181.245 l
150.662 182.799 l
147.604 180.771 l
143.899 182.7 l
136.542 179.905 l
141.34 184.078 l
146.311 184.873 l
150.113 185.842 l
155.26 184.155 l
159.783 185.301 l
164.146 182.722 l
168.764 182.976 l
171.032 178.905 l
175.63 178.376 l
178.119 173.848 l
181.012 172.271 l
181.778 166.474 l
184.356 164.031 l
183.222 158.958 l
186.257 155.117 l
183.41 151.0 l
186.454 148.428 l
182.564 144.98 l
186.505 140.879 l
181.747 139.347 l
184.845 134.946 l
180.96 134.275 l
183.509 129.438 l
179.129 129.498 l
181.334 125.873 l
176.53 126.45 l
177.682 121.237 l
174.051 124.432 l
172.807 118.114 l
170.301 122.652 l
168.948 116.994 l
165.855 121.164 l
165.938 115.232 l
162.521 120.567 l
163.24 117.541 163.099 114.225 165.085 111.372 c
171.245 112.206 175.271 113.755 179.988 118.298 c
184.288 122.434 189.424 131.058 190.816 136.527 c
192.401 142.766 192.453 154.245 190.889 160.599 c
189.384 166.718 187.428 169.638 183.935 174.631 c
180.594 178.178 177.31 181.925 173.072 184.455 c
166.85 188.167 158.871 189.167 151.78 189.071 c
147.852 189.019 145.225 188.265 142.875 187.41 c
138.77 185.918 135.487 182.662 131.315 181.052 c
129.953 180.527 128.862 180.511 127.79 181.082 c
128.84 178.983 129.982 178.042 132.6 177.276 c
134.492 176.725 139.01 177.075 142.121 177.362 c
145.458 177.67 147.202 178.663 151.746 178.602 c
156.184 178.538 159.701 176.854 161.624 175.755 c
165.59 173.485 168.436 170.968 170.907 166.982 c
172.264 164.793 173.214 162.324 173.886 159.802 c
174.556 157.284 174.847 154.46 174.89 151.993 c
174.933 149.524 174.747 147.323 174.142 145.103 c
172.731 139.905 169.615 134.613 163.22 135.43 c
159.306 135.931 153.402 143.279 151.427 145.975 c
147.438 151.416 143.335 157.436 138.324 161.967 c
135.268 164.728 131.086 166.628 126.978 167.003 c
119.271 167.71 116.985 166.246 111.185 161.465 c
112.363 161.087 113.517 160.881 114.727 160.335 c
117.409 159.125 119.863 157.562 122.005 155.558 c
124.25 153.456 125.258 152.126 125.335 149.116 c
125.39 147.119 123.745 145.517 122.238 144.074 c
121.316 143.192 120.098 142.384 119.351 141.7 c
118.36 140.79 117.133 139.797 118.376 138.348 c
118.843 137.802 119.657 137.393 120.342 136.884 c
121.427 136.078 120.932 133.078 119.499 132.284 c
117.668 131.269 115.476 131.381 113.966 132.742 c
115.874 133.027 117.086 133.281 117.036 134.839 c
117.007 135.746 115.856 136.496 114.73 137.011 c
112.008 138.25 109.952 138.068 107.244 140.016 c
104.507 141.984 104.448 143.064 103.711 146.154 c
102.39 146.016 101.176 145.985 99.413 145.402 c
97.649 144.821 95.699 143.431 94.099 143.085 c
90.067 142.217 89.263 142.475 87.056 143.045 c
83.17 144.05 78.11 142.33 73.085 140.723 c
72.252 140.457 68.871 140.715 66.597 139.915 c
63.081 138.683 58.151 135.698 55.303 133.297 c
50.988 129.663 45.319 118.79 42.115 106.306 c
41.778 102.511 42.858 99.954 40.467 98.102 c
38.077 96.245 38.142 91.499 37.333 90.166 c
36.522 88.835 35.583 89.425 33.84 87.555 c
32.094 85.685 31.206 85.996 31.249 82.458 c
32.754 83.448 34.944 84.597 36.87 84.668 c
38.575 84.73 38.594 82.484 42.968 86.809 c
45.309 89.123 49.803 89.193 52.923 90.217 c
56.042 91.236 61.663 93.338 67.294 99.634 c
72.922 105.927 75.616 112.555 76.71 122.133 c
76.882 120.435 77.184 118.518 76.456 113.833 c
75.729 109.148 74.161 103.886 77.464 97.583 c
79.523 93.656 l
78.297 95.327 75.903 98.057 75.186 99.997 c
73.522 104.479 l
69.805 98.646 68.951 97.602 63.787 93.419 c
63.583 90.824 63.533 88.118 64.38 85.639 c
65.229 83.157 63.876 80.293 64.521 78.66 c
65.165 77.026 66.657 77.955 67.146 76.301 c
67.631 74.646 66.89 71.373 67.646 69.761 c
68.402 68.147 70.254 69.128 71.153 68.604 c
72.052 68.084 72.344 67.37 72.824 66.684 c
73.308 66.001 72.638 64.38 73.615 63.855 c
74.592 63.328 76.116 63.776 77.133 63.271 c
78.148 62.764 78.302 61.551 78.059 60.462 c
77.817 59.377 76.728 58.878 76.252 57.771 c
75.774 56.666 75.829 55.894 76.403 54.881 c
76.975 53.864 78.243 53.304 79.507 52.792 c
80.771 52.281 82.549 52.566 83.852 51.858 c
85.156 51.147 86.33 49.737 87.019 48.711 c
87.707 47.684 87.898 46.96 87.863 45.881 c
87.829 44.804 87.39 43.557 86.815 42.519 c
86.237 41.475 84.967 40.207 86.952 38.215 c
88.937 36.228 88.862 37.085 90.0 35.793 c
89.876 38.027 88.953 39.848 89.628 41.526 c
90.301 43.209 92.33 43.501 93.397 44.258 c
94.465 45.015 95.08 46.053 95.922 46.95 c
95.909 45.795 96.033 44.552 95.903 43.684 c
95.633 41.916 95.112 40.346 97.748 40.062 c
98.935 39.936 100.062 40.703 101.311 41.166 c
100.657 39.994 99.52 39.052 99.348 37.65 c
99.176 36.246 99.382 34.707 100.353 33.316 c
101.323 31.923 103.001 30.893 104.229 30.074 c
105.458 29.257 106.115 29.191 107.06 28.748 c
107.107 27.371 106.835 25.909 106.992 24.615 c
107.148 23.315 107.56 22.165 108.307 21.094 c
109.059 20.019 110.263 19.404 111.399 18.609 c
110.776 20.057 109.516 21.43 109.532 22.955 c
109.55 24.478 110.006 25.557 111.491 26.905 c
112.977 28.26 116.455 29.431 118.094 30.746 c
119.732 32.059 120.263 32.862 120.85 34.138 c
121.438 35.416 121.274 37.469 121.384 38.617 c
121.923 37.012 122.001 36.512 122.177 34.831 c
122.354 33.147 121.195 30.792 120.707 29.547 c
122.735 30.527 124.021 32.093 124.674 33.621 c
125.107 33.362 124.89 32.658 125.046 31.296 c
125.771 32.013 126.592 32.566 127.318 33.245 c
128.047 33.923 128.847 34.521 129.207 35.468 c
129.566 36.416 129.42 37.423 129.152 38.521 c
128.884 39.623 127.654 40.896 126.994 42.1 c
126.329 43.305 127.109 44.483 127.063 45.933 c
125.74 46.161 124.615 46.836 123.09 46.617 c
121.569 46.398 119.824 44.689 118.266 44.668 c
116.709 44.647 115.836 46.108 114.562 46.508 c
113.284 46.909 111.994 46.865 110.711 47.042 c
112.336 48.6 118.644 49.342 122.958 50.045 c
126.755 50.665 130.522 51.022 134.368 51.078 c
136.086 51.102 138.294 50.533 139.487 50.876 c
140.681 51.218 140.425 52.031 140.78 52.917 c
141.77 55.395 141.282 57.602 140.741 60.097 c
137.291 60.499 133.692 60.992 130.214 60.728 c
126.812 60.467 122.782 58.851 119.273 58.74 c
116.225 58.646 111.709 59.324 109.089 60.922 c
105.886 62.872 103.41 67.062 102.531 68.41 c
101.101 70.599 99.294 74.899 98.196 76.864 c
97.097 78.829 96.854 79.379 95.939 80.2 c
95.026 81.019 93.773 81.082 92.692 81.526 c
93.94 81.397 95.301 81.792 96.437 81.143 c
98.138 80.166 100.048 76.115 101.107 74.352 c
102.229 78.117 101.968 79.597 105.217 81.72 c
102.598 78.784 102.532 76.56 101.896 73.104 c
104.071 69.529 107.101 63.837 111.063 62.257 c
112.493 61.687 114.951 61.327 116.501 61.137 c
121.313 60.54 125.957 62.064 130.688 63.232 c
134.144 64.09 137.65 63.742 141.854 63.495 c
143.283 63.413 146.648 64.271 147.344 65.714 c
147.722 66.492 147.691 67.43 147.151 68.256 c
146.611 69.092 145.168 69.492 144.397 70.238 c
143.624 70.984 143.181 71.872 142.574 72.689 c
139.36 72.073 136.721 71.836 134.336 71.771 c
136.044 72.477 137.687 72.879 139.464 73.573 c
141.246 74.27 143.265 75.412 144.7 76.359 c
146.139 77.308 147.054 77.858 148.095 78.961 c
149.131 80.063 150.463 81.203 151.229 82.55 c
151.996 83.901 152.113 85.41 152.156 87.079 c
152.199 88.749 152.129 91.091 151.481 92.437 c
150.842 93.78 149.597 94.188 148.603 94.508 c
147.605 94.825 146.924 94.021 145.888 93.911 c
144.848 93.803 143.88 93.149 142.379 93.855 c
140.883 94.559 139.103 95.994 137.586 98.127 c
136.071 100.257 134.989 103.741 133.44 106.422 c
130.777 111.04 127.455 115.354 124.281 119.636 c
124.021 120.691 123.63 122.149 123.499 123.581 c
123.271 126.075 123.227 128.666 124.002 131.102 c
124.594 132.963 125.458 134.931 127.409 135.694 c
128.19 136.001 129.177 136.123 129.876 135.864 c
130.575 135.605 131.258 134.818 130.985 133.909 c
130.683 132.908 129.988 132.879 129.517 132.375 c
128.718 131.518 128.397 130.888 128.098 129.82 c
128.96 129.834 130.129 129.901 130.838 129.714 c
131.764 129.468 132.625 128.854 133.097 127.543 c
131.993 128.524 131.443 128.974 130.063 129.008 c
129.428 129.023 128.663 128.797 127.963 128.691 c
127.7 127.843 127.548 126.798 127.179 126.14 c
126.809 125.482 126.092 125.641 125.821 124.872 c
125.553 124.107 125.538 122.856 125.672 121.846 c
h
129.303 120.504 m
127.916 120.415 127.589 120.598 126.479 119.817 c
127.081 118.88 127.684 117.945 128.282 117.01 c
128.229 118.856 128.41 119.226 129.303 120.504 c
h
82.247 132.878 m
82.31 133.756 82.407 133.736 82.488 134.167 c
80.479 134.706 79.671 133.402 78.496 130.98 c
78.054 130.077 78.491 129.535 78.018 128.941 c
77.544 128.344 76.785 128.429 76.019 127.855 c
75.249 127.283 74.49 126.187 73.773 125.595 c
72.301 124.377 70.312 123.636 68.606 122.815 c
69.772 123.677 72.034 124.98 72.766 126.231 c
73.153 126.894 73.096 128.142 73.7 128.738 c
74.303 129.334 74.516 129.747 75.295 129.898 c
76.074 130.05 75.762 130.953 76.014 131.67 c
76.264 132.391 76.765 132.901 77.298 133.619 c
77.831 134.335 78.504 135.415 79.557 135.806 c
80.61 136.197 82.252 135.773 83.048 135.999 c
83.845 136.225 83.387 136.805 83.966 137.151 c
84.546 137.499 85.673 137.347 86.446 137.718 c
87.818 138.377 88.472 139.479 89.3 140.658 c
89.42 138.121 89.389 136.294 88.478 133.905 c
87.451 131.218 86.41 129.635 83.495 127.984 c
82.491 127.415 81.491 127.218 80.661 126.92 c
81.144 127.581 81.84 127.869 82.116 128.904 c
82.393 129.942 82.186 132.0 82.247 132.878 c
h
95.093 122.946 m
96.136 123.038 97.426 122.758 98.404 122.813 c
99.379 122.867 100.076 123.123 100.911 123.276 c
100.755 124.746 100.903 127.445 99.546 128.426 c
98.67 129.061 95.074 128.581 94.111 128.374 c
91.949 127.909 89.431 126.618 87.341 125.812 c
89.344 127.211 91.073 128.508 93.48 129.232 c
94.924 129.666 98.298 130.23 99.789 129.828 c
100.469 129.644 100.608 129.362 101.021 128.787 c
102.44 126.806 102.437 125.092 102.802 122.782 c
103.165 122.216 103.552 121.841 103.844 121.259 c
104.137 120.677 104.303 119.762 104.386 119.013 c
104.015 119.551 104.239 120.229 103.21 120.628 c
102.182 121.029 100.606 120.653 99.217 120.51 c
100.23 119.781 100.73 119.078 100.77 117.534 c
100.815 115.725 99.283 114.42 97.681 114.296 c
95.458 114.123 94.311 114.611 93.413 116.511 c
93.019 117.343 93.304 118.345 93.271 119.156 c
90.601 118.969 90.646 119.058 88.692 117.43 c
89.755 115.876 90.42 114.981 92.175 114.051 c
93.159 113.529 94.272 113.023 95.491 112.814 c
96.71 112.609 98.709 112.406 99.988 112.604 c
101.27 112.799 101.994 113.167 102.942 114.043 c
103.895 114.92 103.98 116.18 104.353 117.171 c
104.268 116.217 104.157 114.999 103.803 114.304 c
102.723 112.195 100.854 111.571 98.623 111.562 c
96.482 111.556 93.834 112.05 91.843 112.875 c
90.249 113.536 87.609 115.405 86.984 117.028 c
86.557 118.137 86.896 119.499 86.849 120.736 c
89.055 122.203 89.6 121.838 92.209 122.27 c
93.299 122.449 94.05 122.856 95.093 122.946 c
h
101.054 137.501 m
102.157 136.906 103.562 136.118 104.54 136.092 c
105.518 136.067 105.772 136.733 106.351 137.116 c
107.253 134.167 108.293 130.925 109.833 128.248 c
110.477 127.126 110.89 127.647 111.38 126.521 c
111.87 125.394 112.089 123.103 112.553 121.665 c
113.019 120.222 113.624 119.163 114.16 117.915 c
112.801 119.844 111.039 122.304 110.281 123.911 c
109.521 125.516 110.008 125.654 109.394 127.185 c
108.779 128.713 107.54 131.097 106.61 133.053 c
105.946 132.963 105.126 132.844 104.619 132.999 c
104.113 133.154 104.216 133.692 103.761 134.038 c
103.302 134.386 102.535 134.251 101.896 134.804 c
101.254 135.358 101.108 136.496 101.054 137.501 c
h
87.987 85.853 m
88.906 86.596 91.385 86.003 93.239 85.87 c
91.906 85.53 90.574 85.187 89.243 84.847 c
89.119 84.393 89.175 83.872 88.868 83.484 c
88.565 83.1 87.987 82.957 87.546 82.692 c
87.59 83.883 87.068 85.109 87.987 85.853 c
h
105.114 110.721 m
105.831 111.783 106.038 113.412 106.48 114.736 c
106.303 113.061 106.642 111.215 105.824 110.0 c
105.006 108.785 103.569 108.998 102.377 108.644 c
103.303 109.352 104.397 109.66 105.114 110.721 c
h
103.437 92.092 m
103.562 94.651 104.484 96.811 106.777 98.068 c
107.965 98.713 109.793 99.553 111.472 99.752 c
113.084 99.94 117.007 99.802 119.367 98.723 c
121.18 97.897 122.417 96.608 124.006 95.667 c
125.599 94.728 126.729 94.096 128.245 93.04 c
130.571 91.42 131.933 89.635 133.547 88.564 c
134.321 88.053 135.409 88.127 136.44 87.812 c
135.641 87.575 134.594 87.313 133.73 87.59 c
132.653 87.934 131.149 88.917 130.315 89.625 c
128.836 90.87 128.074 91.479 126.463 92.42 c
125.5 92.98 123.916 93.641 122.857 94.331 c
121.801 95.021 119.964 96.531 118.948 97.042 c
117.658 97.692 115.333 98.057 113.895 98.014 c
111.913 97.954 109.043 97.628 107.511 96.236 c
105.985 94.854 105.409 93.639 105.754 91.842 c
106.327 92.503 106.707 93.332 107.283 93.825 c
108.474 94.841 109.839 94.892 111.321 94.696 c
112.987 94.481 113.825 93.517 114.374 91.937 c
114.005 92.211 113.322 92.808 112.787 92.993 c
111.523 93.429 110.572 93.293 109.394 92.66 c
107.999 91.912 108.378 90.807 108.178 89.576 c
108.085 89.009 107.872 88.55 107.719 88.038 c
107.193 88.175 106.711 88.395 106.312 88.789 c
106.327 88.214 106.245 87.71 106.362 87.065 c
106.48 86.418 106.796 85.647 107.013 84.941 c
106.042 85.913 105.046 86.815 104.42 88.067 c
103.792 89.324 103.367 90.716 103.437 92.092 c
h
116.005 89.977 m
117.007 89.929 118.225 89.676 118.929 89.218 c
119.634 88.76 120.38 88.385 121.02 87.737 c
122.615 86.113 123.812 84.155 124.34 81.901 c
124.675 80.469 124.726 78.63 124.85 76.946 c
124.368 78.501 124.042 80.125 123.356 81.52 c
122.269 83.721 120.43 85.867 118.143 86.855 c
117.387 87.182 116.884 87.121 116.469 87.065 c
116.653 86.751 116.967 86.49 116.979 86.031 c
116.993 85.576 116.889 84.683 116.114 84.307 c
114.868 83.7 113.479 84.126 112.515 84.979 c
111.542 85.839 111.212 87.294 111.719 88.542 c
112.326 90.032 114.637 90.034 116.005 89.977 c
h
46.764 85.689 m
45.497 85.604 43.848 85.038 42.742 83.055 c
41.839 81.437 39.725 81.179 38.736 81.505 c
37.092 82.048 34.987 82.426 32.952 80.974 c
30.915 79.521 28.715 80.62 29.102 83.265 c
29.487 85.908 30.441 88.268 32.981 89.724 c
38.518 92.91 34.669 95.129 37.708 98.328 c
40.754 101.529 40.08 102.511 39.982 106.863 c
29.687 108.409 23.851 111.377 17.336 119.517 c
10.82 127.656 8.2954 134.358 7.6201 144.564 c
6.9439 154.77 7.5313 161.382 11.94 169.854 c
16.35 178.325 20.992 182.405 29.036 186.634 c
37.081 190.863 44.964 191.875 52.253 191.753 c
59.538 191.629 64.392 191.096 68.509 188.747 c
72.627 186.397 76.392 183.443 78.793 183.42 c
81.194 183.399 82.83 184.028 83.996 184.922 c
84.307 177.012 77.189 176.324 70.817 176.157 c
64.447 175.99 60.532 178.626 54.666 177.644 c
48.8 176.664 39.194 173.995 34.514 165.848 c
29.834 157.704 29.675 154.824 30.064 147.995 c
30.453 141.164 36.331 136.066 39.648 136.012 c
42.968 135.956 43.71 136.917 46.614 138.812 c
49.519 140.708 64.35 159.066 69.409 163.189 c
74.471 167.313 79.463 168.587 84.856 168.651 c
90.249 168.719 91.626 168.536 95.974 166.754 c
100.322 164.972 102.996 161.689 106.502 159.682 c
108.296 160.738 109.408 162.312 111.053 163.515 c
116.934 167.814 119.989 168.971 126.979 168.291 c
130.997 167.9 136.063 165.605 139.085 162.976 c
144.466 158.298 148.912 151.783 152.506 146.832 c
155.303 142.978 158.596 138.368 163.295 136.926 c
168.428 135.352 172.288 141.999 172.855 145.686 c
173.176 147.774 173.596 149.604 173.6 151.903 c
173.604 154.203 173.369 156.995 172.706 159.389 c
172.042 161.786 170.907 164.172 169.677 166.149 c
167.676 169.368 164.403 172.735 160.997 174.468 c
159.086 175.438 154.587 177.208 151.751 177.269 c
148.278 177.344 145.631 176.176 142.419 175.958 c
138.532 175.692 131.59 174.819 128.543 177.821 c
126.602 179.734 126.358 181.009 126.028 183.501 c
126.883 182.796 128.081 182.331 129.15 182.241 c
131.584 182.036 133.863 184.023 135.828 185.174 c
137.444 186.124 139.737 187.82 141.862 188.674 c
147.324 190.878 154.036 190.815 159.805 190.225 c
164.425 189.751 170.416 187.695 174.468 185.401 c
178.542 183.098 182.468 179.213 185.344 175.551 c
188.959 170.942 190.937 166.988 192.247 161.242 c
193.919 153.904 194.384 142.877 192.36 135.642 c
190.765 129.938 185.468 121.177 180.96 116.884 c
176.512 112.649 171.38 110.605 165.539 109.486 c
165.767 108.307 165.806 107.209 166.107 106.243 c
166.537 104.872 167.357 103.343 169.045 103.823 c
169.714 104.018 170.077 104.185 170.966 103.41 c
171.85 102.633 171.387 99.637 168.892 98.292 c
167.629 97.61 166.293 97.462 164.269 97.422 c
162.243 97.38 159.085 97.372 156.885 97.759 c
154.686 98.144 153.371 99.885 150.939 100.159 c
147.173 100.581 144.292 103.301 141.274 105.243 c
140.015 106.056 139.592 106.065 138.867 106.475 c
139.257 105.274 139.781 104.029 140.043 102.873 c
140.303 101.72 140.192 100.653 140.331 99.728 c
140.469 98.805 140.725 98.089 140.873 97.338 c
141.477 96.801 141.671 95.979 142.681 95.722 c
143.695 95.465 145.28 95.864 146.316 96.007 c
147.356 96.146 148.052 96.709 148.862 96.556 c
149.678 96.401 150.446 95.816 151.13 95.271 c
151.812 94.725 152.396 94.648 152.952 93.283 c
153.502 91.919 154.008 89.131 154.083 87.265 c
154.16 85.4 153.95 83.717 153.397 82.238 c
152.844 80.756 152.361 80.103 150.861 78.636 c
149.367 77.17 146.928 75.019 144.496 73.521 c
144.946 72.859 145.145 72.252 145.842 71.53 c
146.539 70.812 147.997 70.005 148.644 69.247 c
149.289 68.486 149.618 67.943 149.629 67.092 c
149.638 66.239 149.596 65.132 148.905 64.203 c
147.184 61.892 145.148 61.478 142.672 60.391 c
143.087 57.79 143.427 55.935 142.826 53.336 c
142.578 52.281 142.034 49.881 140.73 49.265 c
139.423 48.649 136.906 48.946 135.313 48.693 c
133.721 48.442 132.829 48.2 131.588 47.952 c
130.833 46.864 129.709 45.657 129.323 44.682 c
128.938 43.702 129.056 43.353 129.377 42.354 c
129.701 41.354 130.805 39.9 131.117 38.732 c
131.431 37.562 131.489 36.303 131.198 35.131 c
130.906 33.961 130.407 33.106 129.409 32.065 c
128.408 31.022 126.442 30.206 125.465 29.362 c
124.482 28.518 123.509 28.415 123.778 27.02 c
124.143 25.1 126.947 21.989 128.974 21.249 c
130.189 20.805 131.821 20.945 133.296 21.564 c
133.198 19.929 131.778 18.824 130.851 17.737 c
133.363 18.453 135.795 19.828 137.477 21.646 c
136.957 20.065 135.158 17.527 132.475 15.298 c
129.789 13.069 129.803 13.524 128.469 12.639 c
130.906 12.148 133.17 12.28 135.06 12.621 c
134.023 12.05 132.327 11.249 130.081 11.012 c
127.834 10.776 126.451 10.942 124.426 11.434 c
122.4 11.926 120.553 13.769 118.099 15.037 c
118.339 14.127 118.509 13.032 119.539 12.098 c
120.57 11.16 122.133 10.683 123.791 9.873 c
121.679 10.114 119.461 10.187 117.383 10.643 c
115.848 10.982 114.814 11.344 113.689 11.898 c
112.566 12.457 111.698 13.269 110.702 13.951 c
111.181 13.042 111.321 11.97 112.134 11.219 c
112.944 10.466 114.265 10.187 115.333 9.671 c
114.219 9.695 113.146 9.453 111.994 9.745 c
110.838 10.033 109.757 10.492 108.556 11.375 c
107.354 12.257 106.118 13.349 105.092 14.465 c
104.068 15.576 102.805 17.017 102.423 18.046 c
102.039 19.072 102.654 19.791 102.768 20.659 c
102.062 20.197 101.191 19.942 100.647 19.268 c
100.103 18.594 99.622 17.976 99.863 16.801 c
100.103 15.625 101.188 14.189 101.956 12.882 c
99.668 14.754 98.389 15.474 97.843 17.733 c
97.334 19.848 98.653 21.764 99.656 23.363 c
100.154 24.155 100.899 24.895 101.362 25.66 c
100.33 26.672 99.148 27.541 98.262 28.695 c
97.377 29.853 97.002 31.413 96.1 32.515 c
95.195 33.617 93.98 34.316 92.92 35.216 c
93.852 33.214 95.382 30.764 95.713 29.214 c
96.047 27.664 95.34 26.719 94.791 25.882 c
94.241 25.045 93.355 24.859 92.514 24.344 c
91.672 23.832 90.361 24.236 89.86 23.475 c
89.359 22.711 89.225 21.563 89.704 20.808 c
91.669 17.706 l
90.946 18.073 89.698 19.136 89.135 19.891 c
88.572 20.644 87.711 21.34 87.593 22.357 c
87.476 23.379 87.415 24.265 88.078 25.172 c
88.738 26.08 90.546 26.383 91.357 27.08 c
92.166 27.779 92.62 28.232 92.572 29.135 c
92.527 30.037 91.646 30.685 90.887 31.252 c
88.575 32.985 85.61 34.586 83.645 36.676 c
82.536 37.857 82.003 38.812 81.779 39.627 c
81.557 40.441 81.794 41.076 82.345 42.078 c
82.896 43.081 84.787 44.419 85.014 45.507 c
85.246 46.599 84.29 46.831 83.428 47.215 c
82.569 47.599 80.931 47.019 80.133 47.686 c
79.331 48.354 80.367 49.757 79.465 50.527 c
78.565 51.297 76.504 50.868 75.44 51.695 c
74.377 52.523 73.937 53.553 73.569 54.754 c
73.202 55.954 73.161 57.271 73.412 58.142 c
73.658 59.011 74.405 59.163 74.854 59.611 c
75.307 60.063 75.696 60.438 75.096 61.112 c
74.496 61.783 72.529 61.075 71.398 61.937 c
70.269 62.801 70.96 64.867 70.161 65.736 c
69.362 66.61 67.928 66.269 67.172 66.549 c
66.416 66.825 66.119 65.844 65.653 67.396 c
65.189 68.951 65.176 73.581 64.552 75.311 c
63.928 77.037 62.701 75.427 62.132 77.145 c
61.565 78.864 62.102 81.609 61.846 84.204 c
60.684 91.264 l
56.631 88.541 53.954 87.686 49.6 86.913 c
49.234 76.258 48.234 69.982 51.851 58.162 c
55.467 46.338 62.787 39.371 72.664 29.361 c
59.633 39.124 53.411 47.057 49.519 57.228 c
45.624 67.395 46.37 75.897 46.764 85.689 c
0.007843 0.011765 0.011765 sc
f
Q
Q
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
